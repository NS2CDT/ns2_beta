<shader>

    <inputs>
        <input name="normalMap"             type="texture" address="wrap" />
        <input name="opacityMap"            type="texture" address="wrap" />
        
        <input name="noVisDist"             type="float">  5.0  </input>
        <input name="fullVisDist"           type="float">  2.5  </input>
        <input name="distortionIntensity"   type="float">  0.25 </input>
    </inputs>

    <params>
        <param name="vsPosition">true</param>
        <param name="vsTangent">true</param>
        <param name="vsBinormal">true</param>
        <param name="vsNormal">true</param>
    </params>

    <code>
    <![CDATA[
        float3 DecodeNormal(const float4 texNormal)
        {
            float4 n = texNormal * 2 - 1;
            return n.xyz;
        }
        void MaterialShader(in Material_Input input, inout Material material)
        {
            float distance = length(input.vsPosition);
            float visibility = saturate((distance - fullVisDist) / (noVisDist - fullVisDist));

            // Can't do transparency, so try to erode the edges by cutting out fragments facing
            // away from the viewer (eg on the edges) with increasing strictness as the visibility
            // decreases.
            float3 tsNormal = DecodeNormal(tex2D(normalMap, input.texCoord));
            float3 vsNormal = tsNormal.x * input.vsTangent +
                              tsNormal.y * input.vsBinormal +
                              tsNormal.z * input.vsNormal;
            
            material.ssDistortion = vsNormal.xy * float2(1, -1) * (1 - visibility) * tex2D(opacityMap, input.texCoord).r * distortionIntensity;
        }
    ]]>
    </code>

</shader>